/*
	CryptoStrings.h
 Headers for cryptostrings

 Main idea is CRSTR(original_string, crypted_varname) macro like
 
 szBuff = CRSTR("/script.html", "\xff\xff\x0f\x0c\xf3\xff\x40\x17\xec\xf5\xe6\xf4\x1b\x49\xc7\xd0\x22\x2b\x3b");
 
 In case of no CRSTR_ENABLE defined, it will expand to an ANSI string in a manner
 szBuff = "/script.html";

 In case of crypto strings enabled, it will be expanded to string decryption routine's call like
 szBuff = __CRSTRDecrypt("\x02\x05\x33\x10\x90\x90\x90\x90\x66\x66\x66\x66\x66\x66");	
 passed crypted binary string is generated by parser.

 It is possible to define a string encryption solely inside of C++11 compilation using variadic templates.
 But they are too ugly.

*/
#pragma once

#include <windows.h>

// dbg to totally remove string encryption
//#define CRSTR_DISABLE






// select how to implement crypt macro 
#ifdef CRSTR_DISABLE	
	// no encryption
	#define CRSTR(original_str, crypted_str) original_str

#else
	// use encryption
	#define CRSTR(original_str, crypted_str) __CRSTRDecrypt((BYTE *)crypted_str)
	#define CRSTRA(original_str, crypted_str) CRSTR(original_str, crypted_str)
	#define CRSTRW(original_str, crypted_str) __cs_AtoW(__CRSTRDecrypt((BYTE *)crypted_str))

	// NB: n_minlen, n_maxlen is [1,255] range, 
	// s_generation_regexp is regexp like "[a-zA-Z0-9._]" to be matched against chr(rand(0,255))
	#define CRSTRW_RND(rnd_decrypted_str, rnd_encrypted_str, n_minlen, n_maxlen, s_generation_regexp) __cs_AtoW(__CRSTRDecrypt((BYTE *)rnd_encrypted_str))

	// define functions for import-export, used in both compilation modes
	typedef struct _CryptoStrings_ptrs {

		LPSTR (*fn__CRSTRDecrypt)(const BYTE *pIn);	// decryption routine
		LPWSTR(*fn__cs_AtoW)(LPSTR szAnsiString);	 // ansi to unicode convertor

	} CryptoStrings_ptrs, *PCryptoStrings_ptrs;


	#ifdef ROUTINES_BY_PTR

		#pragma message(__FILE__": ROUTINES_BY_PTR compilation mode")

		// global var definition to be visible by all modules which use this one
		#ifdef __cplusplus
			extern "C" CryptoStrings_ptrs CryptoStrings_apis;
		#else
			extern CryptoStrings_ptrs CryptoStrings_apis;
		#endif

		// transparent code replacements
		#define __CRSTRDecrypt CryptoStrings_apis.fn__CRSTRDecrypt
		#define __cs_AtoW CryptoStrings_apis.fn__cs_AtoW


		VOID CryptoStrings_resolve(CryptoStrings_ptrs *apis);

	#else


		#ifdef __cplusplus
		extern "C" {
		#endif
			LPSTR __CRSTRDecrypt(const BYTE *pIn);	// decryption routine
			LPWSTR __cs_AtoW(LPSTR szAnsiString);	 // ansi to unicode convertor

			VOID CryptoStrings_imports(CryptoStrings_ptrs *apis);
		#ifdef __cplusplus
		}
		#endif

	#endif

#endif

